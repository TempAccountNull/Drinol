#pragma once
#include "games/engine.h"

namespace halo3::engine // Engine related structs, etc
{
	// search the string: hs_doc.txt to find the functions that contain the amount of globals, and functions

		//Generated by reclass.net
		/**
	 * \brief the table of functions that are used in halos scripting system.
	 */
	class _hs_function_table
	{
	public:
		class _hs_script_op* table[1528]; //0x0000
	}; //Size: 0x2FC0
	static_assert(sizeof(_hs_function_table) == 0x2FC0);

	class _hs_script_op
	{
	public:
		int16_t return_type; //0x0000
		int16_t flags; //0x0002
		int32_t unused; //0x0004
		char* name; //0x0008
		char pad_0010[8]; //0x0010
		void* parse_func; //0x0018
		void* evaluate_func; //0x0020
	}; //Size: 0x0028
	static_assert(sizeof(_hs_script_op) == 0x28);

	/**
	 * \brief the table of globals that are used in halos scripting system.
	 */
	class _hs_external_globals
	{
	public:
		class hs_external_global* globals[1318]; //0x0000 The list of globals.
		// 466 is the hardcoded total number of globals in this array TODO: Fetch this dynamically somehow?
	}; //Size: 0x2930
	static_assert(sizeof(_hs_external_globals) == 0x2930);

	class hs_external_global
	{
	public:
		char* name; //0x0000 Name of the global
		int64_t param_type; //0x0008 parameter type (unparsed, float, bool, etc)
		void* address; //0x0010 // The address of the global
	}; //Size: 0x0018
	static_assert(sizeof(hs_external_global) == 0x18);

	class _hs_type_names
	{
	public:
		char* types[83]; //0x0000 List of parameter types in the form of a string.
		// 83 is the total number of types in this array TODO: Fetch this dynamically somehow?
	}; //Size: 0x0298
	static_assert(sizeof(_hs_type_names) == 0x298);

	class s_game_tick_time_samples
	{
	public:
		uint32_t flags; //0x0000
		float N00000EAC; //0x0004
		float N00000EAE; //0x0008
		float N00000EB7; //0x000C
		uint32_t N00000EB9; //0x0010
	}; //Size: 0x0014
	static_assert(sizeof(s_game_tick_time_samples) == 0x14);

	class game_time_globals_definition
	{
	public:
		bool initialized; //0x0000
		uint8_t N00000E99; //0x0001
		uint16_t flags; //0x0002
		uint16_t tick_rate; //0x0004
		uint16_t N00000E9A; //0x0006
		float seconds_per_tick; //0x0008
		uint32_t elapsed_ticks; //0x000C
		float speed; //0x0010
		float game_ticks_leftover; //0x0014
		s_game_tick_time_samples time_samples; //0x0018
	}; //Size: 0x002C
	static_assert(sizeof(game_time_globals_definition) == 0x2C);

	// Thanks to https://github.com/matty45/Drinol/commit/e454d79474b7923d0fc507a5efba6ddf705679f5#commitcomment-106396372
	struct s_physics_constants
	{
		real gravity;
		real water_density;
		real air_density;
		real_vector3d velocity_frame;
		long character_ground_adhesion_forces_enable_time;
		real lip_surface_maximum_k;
	};
	static_assert(sizeof(s_physics_constants) == 0x20);

	enum e_shield_recharge_rate_percentage_setting : unsigned char
	{
		_shield_recharge_rate_percentage_setting_unchanged = 0,

		_shield_recharge_rate_percentage_setting_negative_25_percent, // -0.25
		_shield_recharge_rate_percentage_setting_negative_10_percent, // -0.1
		_shield_recharge_rate_percentage_setting_negative_5_percent,  // -0.05
		_shield_recharge_rate_percentage_setting_0_percent,           // 0.0
		_shield_recharge_rate_percentage_setting_50_percent,          // 0.5
		_shield_recharge_rate_percentage_setting_90_percent,          // 0.9
		_shield_recharge_rate_percentage_setting_100_percent,         // 1.0
		_shield_recharge_rate_percentage_setting_110_percent,         // 1.1
		_shield_recharge_rate_percentage_setting_200_percent,         // 2.0

		k_shield_recharge_rate_percentage_settings,
		k_shield_recharge_rate_percentage_setting_default = _shield_recharge_rate_percentage_setting_100_percent
	};

	class s_player_configuration
	{
	public:
		wchar_t name[16]; //0x0000
		char pad_0020[30]; //0x0020
		wchar_t clan_tag[3]; //0x003E
		char pad_0044[92]; //0x0044
	}; //Size: 0x00A0
	static_assert(sizeof(s_player_configuration) == 0xA0);

	class c_player_trait_shield_vitality
	{
	public:
		int8_t m_damage_resistance_percentage_setting; //0x0000
		int8_t m_shield_recharge_rate_percentage_setting; //0x0001
		int8_t m_vampirism_percentage_setting; //0x0002
		int8_t m_headshot_immunity_setting; //0x0003
		int8_t m_shield_multiplier_setting; //0x0004
	}; //Size: 0x0005
	static_assert(sizeof(c_player_trait_shield_vitality) == 0x5);

	class c_player_trait_weapons
	{
	public:
		int16_t m_initial_grenade_count; //0x0000
		uint8_t m_initial_primary_weapon_absolute_index; //0x0002
		uint8_t m_initial_secondary_weapon_absolute_index; //0x0003
		uint8_t m_damage_modifier_percentage_setting; //0x0004
		uint8_t m_recharging_grenades_setting; //0x0005
		uint8_t m_infinite_ammo_setting; //0x0006
		uint8_t m_weapon_pickup_allowed_setting; //0x0007
	}; //Size: 0x0008
	static_assert(sizeof(c_player_trait_weapons) == 0x8);

	class c_player_trait_movement
	{
	public:
		uint8_t m_speed_setting; //0x0000
		uint8_t m_gravity_setting; //0x0001
		uint8_t m_vehicle_usage_setting; //0x0002
	}; //Size: 0x0003
	static_assert(sizeof(c_player_trait_movement) == 0x3);

	enum active_camo_settings : unsigned char
	{
		unchanged = 0,
		off,
		poor,
		good,
		invisible
	};

	enum e_waypoint_setting : unsigned char
	{
		// UNCHANGED
		_waypoint_setting_unchanged = 0,

		// OFF
		_waypoint_setting_off,

		// ALLIES
		_waypoint_setting_allies,

		// ALL
		_waypoint_setting_all,

		k_waypoint_settings
	};

	enum e_aura_setting : unsigned char
	{
		// UNCHANGED
		_aura_setting_unchanged = 0,

		// OFF
		_aura_setting_off,

		// TEAM COLOR
		_aura_setting_team_color,

		// BLACK
		_aura_setting_black,

		// WHITE
		_aura_setting_white,

		k_aura_settings
	};

	enum e_forced_change_color_setting : unsigned char
	{
		// UNCHANGED
		_forced_change_color_setting_unchanged = 0,

		// OFF
		_forced_change_color_setting_off,

		// RED
		_forced_change_color_setting_mp_team_red,

		// BLUE
		_forced_change_color_setting_mp_team_blue,

		// GREEN
		_forced_change_color_setting_mp_team_green,

		// YELLOW
		_forced_change_color_setting_mp_team_yellow,

		// PURPLE
		_forced_change_color_setting_mp_team_purple,

		// ORANGE
		_forced_change_color_setting_mp_team_orange,

		// BROWN
		_forced_change_color_setting_mp_team_brown,

		// GREY (PINK)
		_forced_change_color_setting_mp_team_grey,

		// XTRA 1 (PRIMARY COLOR)
		_forced_change_color_setting_extra1,

		// XTRA 2 (SECONDARY COLOR)
		_forced_change_color_setting_extra2,

		// XTRA 3 (TERTIARY COLOR)
		_forced_change_color_setting_extra3,

		// XTRA 4 (QUATERNARY COLOR)
		_forced_change_color_setting_extra4,

		k_forced_change_color_settings
	};

	class c_player_trait_appearance
	{
	public:
		uint8_t m_active_camo_setting; //0x0000
		uint8_t m_waypoint_setting; //0x0001
		uint8_t m_aura_setting; //0x0002
		uint8_t m_forced_change_color_setting; //0x0003
	}; //Size: 0x0004
	static_assert(sizeof(c_player_trait_appearance) == 0x4);

	class c_player_trait_sensors
	{
	public:
		uint16_t m_motion_tracker_setting; //0x0000
		uint16_t m_motion_tracker_range_setting; //0x0002
	}; //Size: 0x0004
	static_assert(sizeof(c_player_trait_sensors) == 0x4);

	class c_player_traits : public c_player_trait_shield_vitality
	{
	public:
		char padding[3][1]; //0x0005
		class c_player_trait_weapons m_weapon_traits; //0x0008
		class c_player_trait_movement m_movement_traits; //0x0010
		uint8_t pad[1]; //0x0013
		class c_player_trait_appearance m_appearance_traits; //0x0014
		class c_player_trait_sensors m_sensor_traits; //0x0018
	}; //Size: 0x001C
	static_assert(sizeof(c_player_traits) == 0x1C);

	class s_player_identifier
	{
	public:
		uint32_t parts[2]; //0x0000
	}; //Size: 0x0008

	class player_datum
	{
	public:
		int8_t unk0000; //0x0000
		char pad_0001[3]; //0x0001
		uint32_t flags; //0x0004
		char player_identifier[8]; //0x0008
		uint32_t time; //0x0010
		char machine_identifier[4]; //0x0014
		int16_t unk18; //0x0018
		int16_t machine_index; //0x001A
		int16_t machine_user_index; //0x001C
		char pad_001E[2]; //0x001E
		int32_t machine_controller_index; //0x0020
		int32_t controller_index; //0x0024
		uint32_t unit_index; //0x0028
		uint32_t dead_unit_index; //0x002C
		uint32_t failed_teleport_unit_index; //0x0030
		char pad_0034[4]; //0x0034
		void** unk38; //0x0038
		uint32_t unk40; //0x0040
		int8_t next_spawn_control_context; //0x0044
		char pad_0045[2]; //0x0045
		uint8_t unk47; //0x0047
		uint8_t unk48; //0x0048
		char pad_0049[3]; //0x0049
		real_vector3d position; //0x004C
		s_player_configuration configuration; //0x0058
		s_player_configuration desired_configuration; //0x00F8
		int32_t unk198; //0x0198
		int16_t dead; //0x019C
		char pad_019E[18]; //0x019E
		void* unk1B0; //0x01B0
		uint32_t unk1B8; //0x01B8
		char pad_01BC[4]; //0x01BC
		uint32_t unk1C0; //0x01C0
		char pad_01C4[4]; //0x01C4
		uint32_t unk1C8; //0x01C8
		int32_t unk1CC; //0x01CC
		int32_t unk1D0; //0x01D0
		int16_t unk1D4; //0x01D4
		char pad_01D6[1]; //0x01D6
		uint8_t unk1D7; //0x01D7
		char pad_01D8[8]; //0x01D8
		uint8_t unk1E0; //0x01E0
		char pad_01E1[3]; //0x01E1
		uint16_t unk1E4; //0x01E4
		char pad_01E6[2]; //0x01E6
		uint16_t unk1E8; //0x01E8
		char pad_01EA[4]; //0x01EA
		uint16_t lives_remaining; //0x01EE
		uint32_t unk1F0; //0x01F0
		uint32_t unk1F4; //0x01F4
		c_player_traits player_traits; //0x01F8
		uint32_t unk214; //0x0214
		uint32_t unk218; //0x0218
		uint8_t respawn_target_player_index; //0x021C
		int8_t padding_21D[3]; //0x021D
		int32_t unk_220; //0x0220
		int8_t padding_224[28]; //0x0224
		int8_t unk240; //0x0240
		uint8_t N00017092; //0x0241
		uint8_t unk242; //0x0242
		char pad_0243[3]; //0x0243
		uint8_t unk246; //0x0246
		char pad_0247[1]; //0x0247
		uint32_t unk248; //0x0248
		uint32_t unk24c; //0x024C
		uint8_t unk250; //0x0250
		char pad_0251[27]; //0x0251
		uint32_t unk26C; //0x026C
		char pad_0270[27]; //0x0270
		int8_t unk28B; //0x028B
		char pad_028C[4]; //0x028C
		uint16_t unk290; //0x0290
		char pad_0292[20]; //0x0292
		int16_t unk2A6; //0x02A6
		char pad_02A8[24]; //0x02A8
		void* unk2C0; //0x02C0
		uint64_t unk2c8; //0x02C8
		char pad_02D0[32]; //0x02D0
	}; //Size: 0x02F0
	static_assert(sizeof(player_datum) == 0x2F0);

	struct s_data_array
	{
		char name[32];
		unsigned long maximum_count;
		long size;
		unsigned char alignment_bits;
		unsigned char valid;
		unsigned short flags;
		unsigned long signature;
		void* allocation;
		long next_index;
		long first_unallocated;
		long actual_count;
		unsigned short next_identifier;
		unsigned short isolated_next_identifier;
		char* data;
		unsigned long* in_use_bit_vector;
		long offset_to_data;
		long offset_to_bit_vector;
	};

	class players_header
	{
	public:
		char pad_0000[72]; //0x0000
		player_datum* players; //0x0048
	}; //Size: 0x0050

	struct s_thread_local_storage
	{
		void* __unknown0[2];
		players_header* player_data;
		int g_registered_thread_index;
		void* __unknown20[3];
		s_data_array* object_header;
		void* __unknown40[162];
		unsigned int* g_deterministic_random_seed_ptr;
		void* __unknown558[8];
		unsigned __int8* g_restricted_address[5];
		void* __unknown5C0[22];
	};

	enum game_tls_index // TLS indexes used in Halo 3
	{
		in_progress = 72,
		physics_constants = 304,
		player_mapping_globals = 272
	};

	struct c_font_cache_scope_lock
	{
		volatile bool m_value;
	};

	struct c_font_cache_base
	{
		struct c_font_cache_base_vtbl* __vftable /*VFT*/;
	};

	struct c_font_cache_mt_safe : c_font_cache_base
	{
		c_font_cache_scope_lock m_locked;
	};

	//Original fonts Font _ Font size
	enum e_font_id
	{
		FixedSys_9 = 0,
		Conduit_16 = 1,
		Conduit_32 = 2,
		Conduit_32_2 = 3,
		Conduit_23 = 4,
		fixedsys_9_2 = 5,
		Conduit_18 = 6,
		larabie_10 = 7,
		conduit_18 = 8,
		Conduit_16_2 = 9,
		pragmata_14 = 10,
	};

	struct __declspec(align(8)) c_draw_string
	{
		qword __vftable;
		qword flags;
		qword m_font;
		DWORD dword18;
		int m_justification;
		int m_drop_shadow_style;
		real_argb_color m_color;
		real_argb_color m_shadow_color;
		real m_scale;
		real m_display_resolution_scale_adjustment;
		DWORD dword4C;
		char char50;
		BYTE gap51[87];
		qword qwordA8;
		qword qwordB0;
		qword dwordB8;
		__declspec(align(8)) char charC0;
		BYTE gapC1[87];
		qword qword118;
		qword qword120;
	};

	struct c_rasterizer_draw_string : c_draw_string
	{
		real_point2d m_rotation_origin;
		real m_rotation;
		real m_sine_rotation;
		real m_cosine_rotation;
		bool unk13C;
		DWORD dword140;
		DWORD dword144;
		DWORD dword148;
		char char14C;
		BYTE gap14D[1791];
		DWORD dword84C;
	};

	enum scenario_type : __int8
	{
		_scenario_type_none = 0x0,
		_scenario_type_campaign = 0x1,
		_scenario_type_multiplayer = 0x2,
		_scenario_type_mainmenu = 0x3,
		_scenario_type_shared = 0x4,
		_scenario_type_count = 0x5,
	};

	struct s_game_options
	{
		scenario_type game_mode;
		uint8_t game_simulation;
		uint8_t game_network_type;
		uint16_t game_tick_rate;
		uint64_t game_instance;
		uint32_t random_seed;
		uint32_t language;
		uint8_t determinism_version;
		char pad_0016[323];
		uint16_t campaign_difficulty;
		uint16_t campaign_insertion_point;
		uint16_t campaign_metagame_scoring;
		char pad_015F[5495];
	};

	struct s_game_globals
	{
		bool initializing;
		bool map_active;
		uint8_t N00006F9A;
		uint8_t N00006F9D;
		uint32_t active_structure_bsp_mask;
		uint16_t active_designer_zone_mask;
		uint32_t active_cinematic_zone_mask;
		s_game_options game_options;
		char pad_16E4[58515];
		uint32_t N000036B3;
		uint32_t active_skulls2;
		uint32_t N000036B5;
		uint32_t active_primary_skulls;
		uint32_t active_secondary_skulls;
		uint32_t N00003699;
		uint32_t N000035D0;
		char pad_FB93[1580];
	};

	class s_player_control_non_deterministic_input_user_state
	{
	public:
		uint8_t data0[6]; //0x0000
		bool player_input_locked; //0x0006
		uint8_t data7[17]; //0x0007
		uint32_t player_control_flags; //0x0018
		uint8_t data1C[20]; //0x001C
	}; //Size: 0x0030
	static_assert(sizeof(s_player_control_non_deterministic_input_user_state) == 0x30);

	struct s_player_control_globals
	{
		s_player_control_non_deterministic_input_user_state input_user_states[4];
		char pad_00C0[1608];
		bool machinima_camera_enabled;
		bool machinima_camera_use_old_controls;
		bool machinima_camera_debug;
		char pad_070B[4205];
	};

	struct c_allocation_base
	{
		virtual void* allocate(c_allocation_base* unk, qword unk2);
		virtual void deallocate(void* buffer);
	};

	class game_allegiance
	{
	public:
		char pad_0000[2]; //0x0000
		int16_t unk2; //0x0002
		int16_t team1; //0x0004
		uint16_t team2; //0x0006
		uint16_t unk8; //0x0008
		int8_t unkA; //0x000A
		uint8_t unkB; //0x000B
		int8_t unkC; //0x000C
		int8_t unkD; //0x000D
		int8_t unkE; //0x000E
		int8_t unkF; //0x000F
		uint16_t unk10; //0x0010
		uint16_t unk12; //0x0012
	}; //Size: 0x0014
	static_assert(sizeof(game_allegiance) == 0x14);

	class game_allegiance_globals
	{
	public:
		int16_t allegiance_count; //0x0000
		char pad_0002[18]; //0x0002
		game_allegiance allegiances[9]; //0x0014
		char pad_00C8[380]; //0x00C8
	}; //Size: 0x0244
	static_assert(sizeof(game_allegiance_globals) == 0x244);

	// There are 15/16 sp_teams in total
}
